diff -d --normal -r last.fm-1.3.2.13-orig/src/AudioController.cpp last.fm-1.3.2.13/src/AudioController.cpp
65a66,143
> 
> 
> 
> 
> 
> // ID3V1 tag format
> // HINT: this are fixed widths, which are directly read out of the file
> struct id3v1_t {
> 	char		name[30];
> 	char		interpreter[30];
> 	char		album[30];
> 	char		year[4];
> 	char		comment[30];
> 	char		genre;
> };
> 
> // call it at the end of the writing-process
> void fwriteMp3Tags(const id3v1_t& tags, FILE* f) {
> 	fwrite("TAG", 3, 1, f);
> 	fwrite(&tags, sizeof(id3v1_t), 1, f);
> }
> 
> 
> Ripper* Ripper::singleton = NULL;
> 
> int Ripper::onNewEvent( const QString& msg ) {
> 	QString script = savePath( "onNewEvent" );
> 	QString cmd = "\"" + script + "\" " + msg;
> 	printf("executing: %s\n", cmd.toUtf8().constData());
> 	return system(cmd.toUtf8().constData());
> }
> 
> void Ripper::onTrackStarted( const TrackInfo& track ) {
> 	curTrack = &track;
> 	printf("onTrackStarted: %s - %s\n",
> 		track.artist().toUtf8().constData(), track.track().toUtf8().constData());
> 	onNewEvent("newtrack: \"" + track.artist() + "\" - \"" + track.track() + "\"");
> }
> 
> void Ripper::onTrackEndReached( int atPosition ) {
> 	if(!curTrack) return;
> 	
> 	QString filename = savePath( curTrack->artist() + " - " + curTrack->track() + ".mp3" );
> 	printf("onTrackEndReached: %s - %s\n",
> 		curTrack->artist().toUtf8().constData(), curTrack->track().toUtf8().constData());
> 	
> 	if(onNewEvent("endtrack: \"" + curTrack->artist() + "\" - \"" + curTrack->track() + "\"") == 0) {
> 		printf("   saving %s\n", filename.toUtf8().constData());
> 	
> 		id3v1_t tags;
> 		strncpy(tags.name, curTrack->track().toAscii().constData(), 30);
> 		strncpy(tags.interpreter, curTrack->artist().toAscii().constData(), 30);
> 		strncpy(tags.album, curTrack->album().toAscii().constData(), 30);
> 		strncpy(tags.year, "", 4);
> 		strncpy(tags.comment, "", 30);
> 		tags.genre = 255;
> 		
> 		FILE* f = fopen(filename.toUtf8().constData(), "wb");
> 		fwrite(buffer.constData(), buffer.length(), 1, f);
> 		fwriteMp3Tags(tags, f);
> 		fclose(f);
> 	} else
> 		printf("   not saving\n");
> 	
> 	finishCurrent();
> }
> 
> void Ripper::processData( const QByteArray &data ) {
> 	buffer.append(data);
> }
> 
> void Ripper::ignoreCurrent() {
> 	finishCurrent();
> 	printf("ignore current track\n");
> }
> 
> 
> 
337c415,416
<                 
---
>                 if(fine && Ripper::singleton) Ripper::singleton->processData( data );
> 
730a810
> 
733a814
> 	ripper.onTrackStarted( m_currentTrack );
742c823,824
< 
---
> 	
> 	ripper.onTrackEndReached( atPosition );
749a832,834
>     if( m_state == State_Stopping || m_state == State_Skipping )
>        	ripper.ignoreCurrent();
> 
diff -d --normal -r last.fm-1.3.2.13-orig/src/AudioController.h last.fm-1.3.2.13/src/AudioController.h
262a263,284
> 
> class Ripper {
> protected:
> 	const TrackInfo* curTrack;
> 	QByteArray buffer;
> 	
> 	void finishCurrent() { curTrack = NULL; buffer.clear(); }
> 	int onNewEvent( const QString& msg );
> 	
> public:
> 	static Ripper* singleton;
> 	Ripper() : curTrack(NULL) { singleton = this; }
> 	~Ripper() { singleton = NULL; }
> 	
> 	void onTrackStarted( const TrackInfo& track );
> 	void onTrackEndReached( int atPosition );
> 	void processData( const QByteArray &data );
> 	void ignoreCurrent();
> };
> 
> 
> 
396c418,420
<     
---
> 
> 	Ripper ripper;
> 
